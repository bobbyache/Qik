<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="ErrorState1" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\ErrorState1.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ErrorState2" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\ErrorState2.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="HappyFace" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\HappyFace.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="OkFace" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\OkFace.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="UnhappyFace" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\UnhappyFace.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="BuiltInEnum_CenterParent_Desc" xml:space="preserve">
    <value>The form is centered within the bounds of its parent form.</value>
  </data>
  <data name="BuiltInEnum_CenterParent_Name" xml:space="preserve">
    <value>Center Parent</value>
  </data>
  <data name="BuiltInEnum_CenterScreen_Desc" xml:space="preserve">
    <value>The form is centered on the current display, and has the dimensions specified in the form's size.</value>
  </data>
  <data name="BuiltInEnum_CenterScreen_Name" xml:space="preserve">
    <value>Center Screen</value>
  </data>
  <data name="BuiltInEnum_Manual_Desc" xml:space="preserve">
    <value>The position of the form is determined by the Location property.</value>
  </data>
  <data name="BuiltInEnum_Manual_Name" xml:space="preserve">
    <value>Manual</value>
  </data>
  <data name="BuiltInEnum_WindowsDefaultBounds_Desc" xml:space="preserve">
    <value>The form is positioned at the Windows default location and has the bounds determined by Windows default.</value>
  </data>
  <data name="BuiltInEnum_WindowsDefaultBounds_Name" xml:space="preserve">
    <value>Windows Default Bounds</value>
  </data>
  <data name="BuiltInEnum_WindowsDefaultLocation_Desc" xml:space="preserve">
    <value>The form is positioned at the Windows default location and has the dimensions specified in the form's size.</value>
  </data>
  <data name="BuiltInEnum_WindowsDefaultLocation_Name" xml:space="preserve">
    <value>Windows Default Location</value>
  </data>
  <data name="PropC_False_Desc" xml:space="preserve">
    <value>It is negative.</value>
  </data>
  <data name="PropC_False_Name" xml:space="preserve">
    <value>You couldn’t be far from the truth.</value>
  </data>
  <data name="PropC_True_Desc" xml:space="preserve">
    <value>It is positive.</value>
  </data>
  <data name="PropC_True_Name" xml:space="preserve">
    <value>Yes, that is absolutely right.</value>
  </data>
  <data name="Days_Fri_Desc" xml:space="preserve">
    <value>Venus's day.</value>
  </data>
  <data name="Days_Fri_Name" xml:space="preserve">
    <value>Friday</value>
  </data>
  <data name="Days_Mon_Desc" xml:space="preserve">
    <value>Day of the Moon.</value>
  </data>
  <data name="Days_Mon_Name" xml:space="preserve">
    <value>Monday</value>
  </data>
  <data name="Days_None_Desc" xml:space="preserve">
    <value>Event will not reoccur.</value>
  </data>
  <data name="Days_None_Name" xml:space="preserve">
    <value>Not selected</value>
  </data>
  <data name="Days_NoWork_Desc" xml:space="preserve">
    <value>Only Saturday and Sunday.</value>
  </data>
  <data name="Days_NoWork_Name" xml:space="preserve">
    <value>Weekend</value>
  </data>
  <data name="Days_Sat_Desc" xml:space="preserve">
    <value>Day of Saturn.</value>
  </data>
  <data name="Days_Sat_Name" xml:space="preserve">
    <value>Saturday</value>
  </data>
  <data name="Days_Sun_Desc" xml:space="preserve">
    <value>Day of the sun.</value>
  </data>
  <data name="Days_Sun_Name" xml:space="preserve">
    <value>Sunday</value>
  </data>
  <data name="Days_Thr_Desc" xml:space="preserve">
    <value>Day of Jupiter.</value>
  </data>
  <data name="Days_Thr_Name" xml:space="preserve">
    <value>Thursday</value>
  </data>
  <data name="Days_Tue_Desc" xml:space="preserve">
    <value>Day of Mars.</value>
  </data>
  <data name="Days_Tue_Name" xml:space="preserve">
    <value>Tuesday</value>
  </data>
  <data name="Days_Wed_Desc" xml:space="preserve">
    <value>Day of Mercury.</value>
  </data>
  <data name="Days_Wed_Name" xml:space="preserve">
    <value>Wednesday</value>
  </data>
  <data name="Days_Work_Desc" xml:space="preserve">
    <value>All days except Saturday and Sunday.</value>
  </data>
  <data name="Days_Work_Name" xml:space="preserve">
    <value>Weekdays</value>
  </data>
  <data name="TC_Cat1" xml:space="preserve">
    <value>Enumeration features</value>
  </data>
  <data name="TC_Cat2" xml:space="preserve">
    <value>General features</value>
  </data>
  <data name="TC_Cat3" xml:space="preserve">
    <value>Image features</value>
  </data>
  <data name="TC_Cat4" xml:space="preserve">
    <value>Standard values usage</value>
  </data>
  <data name="TC_Cat5" xml:space="preserve">
    <value>Expandable IEnumerable</value>
  </data>
  <data name="TC_CenterParent_Desc" xml:space="preserve">
    <value>The form is centered on the current display, and has the dimensions specified in the form's size.</value>
  </data>
  <data name="TC_CenterParent_Name" xml:space="preserve">
    <value>Center Parent</value>
  </data>
  <data name="TC_CenterScreen_Desc" xml:space="preserve">
    <value>The form is positioned at the Windows default location and has the dimensions specified in the form's size.</value>
  </data>
  <data name="TC_CenterScreen_Name" xml:space="preserve">
    <value>Center Screen</value>
  </data>
  <data name="TC_Manual_Desc" xml:space="preserve">
    <value>The position of the form is determined by the Location property.</value>
  </data>
  <data name="TC_Manual_Name" xml:space="preserve">
    <value>Manual</value>
  </data>
  <data name="TC_PropA_Desc" xml:space="preserve">
    <value>Demonstrates how to use enumeration without FlagsAttribute.</value>
  </data>
  <data name="TC_PropA_Name" xml:space="preserve">
    <value>Enum without Flags</value>
  </data>
  <data name="TC_PropB_Desc" xml:space="preserve">
    <value>Demonstrates how to use enumeration with FlagsAttribute.</value>
  </data>
  <data name="TC_PropB_Name" xml:space="preserve">
    <value>Enum with Flags</value>
  </data>
  <data name="TC_PropC_Desc" xml:space="preserve">
    <value>Demonstrates how to use booean as enumeration.</value>
  </data>
  <data name="TC_PropC_Name" xml:space="preserve">
    <value>Boolean without True/False</value>
  </data>
  <data name="TC_PropD_Desc" xml:space="preserve">
    <value>Demonstrates how to use built-in enumeration.</value>
  </data>
  <data name="TC_PropD_Name" xml:space="preserve">
    <value>Built-in enumeration</value>
  </data>
  <data name="TC_PropE_Desc" xml:space="preserve">
    <value>This property was created at run-time.</value>
  </data>
  <data name="TC_PropE_Name" xml:space="preserve">
    <value>On-the-fly property</value>
  </data>
  <data name="TC_PropF_Desc" xml:space="preserve">
    <value>Demonstrate how to disable a property.</value>
  </data>
  <data name="TC_PropF_Name" xml:space="preserve">
    <value>Disabled property</value>
  </data>
  <data name="TC_PropG_Desc" xml:space="preserve">
    <value>Shows image for the property value. Test values:  0, 1, 2, and 3.</value>
  </data>
  <data name="TC_PropG_Name" xml:space="preserve">
    <value>Value image</value>
  </data>
  <data name="TC_PropH_Desc" xml:space="preserve">
    <value>Shows how you can show an state image for your property. Test values:  0, 1, 2, and 3.</value>
  </data>
  <data name="TC_PropH_Name" xml:space="preserve">
    <value>State image(s)</value>
  </data>
  <data name="TC_PropI_Desc" xml:space="preserve">
    <value>Demonstrate the use of standard values.  This list is not exclusive, meaning you can type in the field.  Test values:  adam, brian, russel, jones, jakob, 101, 102, 103, 104, 105 and any integer value.</value>
  </data>
  <data name="TC_PropI_Name" xml:space="preserve">
    <value>Standard value non-exclusive</value>
  </data>
  <data name="TC_PropJ_Desc" xml:space="preserve">
    <value>Demonstrate the use of standard values.  This list is exclusive, meaning you cannot type in the field. </value>
  </data>
  <data name="TC_PropJ_Name" xml:space="preserve">
    <value>Standard value exclusive</value>
  </data>
  <data name="TC_PropK_Desc" xml:space="preserve">
    <value>Demonstrate the use of expandable list.</value>
  </data>
  <data name="TC_PropK_Name" xml:space="preserve">
    <value>Expandable list</value>
  </data>
  <data name="TC_PropL_Desc" xml:space="preserve">
    <value>Demonstrate the use of expandable array.</value>
  </data>
  <data name="TC_PropL_Name" xml:space="preserve">
    <value>Expandable array</value>
  </data>
  <data name="TC_PropM_Desc" xml:space="preserve">
    <value>Demonstrate the use of expandable collection.</value>
  </data>
  <data name="TC_PropM_Name" xml:space="preserve">
    <value>Expandable collection</value>
  </data>
  <data name="Placement_First_Desc" xml:space="preserve">
    <value>Gold medalist.</value>
  </data>
  <data name="Placement_Frist_Name" xml:space="preserve">
    <value>First place</value>
  </data>
  <data name="Placement_None_Desc" xml:space="preserve">
    <value>Placement has not be decided.</value>
  </data>
  <data name="Placement_None_Name" xml:space="preserve">
    <value>Not selected</value>
  </data>
  <data name="Placement_Second_Desc" xml:space="preserve">
    <value>Silver medalist.</value>
  </data>
  <data name="Placement_Second_Name" xml:space="preserve">
    <value>Second place</value>
  </data>
  <data name="Placement_Third_Desc" xml:space="preserve">
    <value>Bronze medalist.</value>
  </data>
  <data name="Placement_Third_Name" xml:space="preserve">
    <value>Third place</value>
  </data>
  <data name="BuiltinBool_False_Desc" xml:space="preserve">
    <value>It is false.</value>
  </data>
  <data name="BuiltinBool_False_Name" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="BuiltinBool_True_Desc" xml:space="preserve">
    <value>It is true.</value>
  </data>
  <data name="BuiltinBool_True_Name" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>