@startuml

abstract class BaseFunction <<abstract>> {
    -functionArguments: List<IFunction>
    +Name: string
    +BaseFunction(name: string, functionArguments: List<IFunction>)
    +Execute(): string
}

class CamelCaseFunction {
    +CamelCaseFunction(name: string, functionArguments: List<IFunction>)
    +Execute(): string
}

class ConcatenateFunction {
    -functions: List<IFunction>
    +ConcatenateFunction(name: string)
    +Execute(): string
    +AddFunction(func: IFunction): void
}

class ConstantFunction {
    -text: string
    +ConstantFunction(name: string, text: string)
    +Execute(): string
}

class VariableFunction {
    -symbol: string
    -symbolTable: ISymbolTable
    +VariableFunction(name: string, symbolTable: ISymbolTable, symbol: string)
    +Execute(): string
}

interface IFunction <<interface>> {
    +Name: string
    +Execute(): string
}

class TextFunction {
    -text: string
    +TextFunction(name: string, text: string)
    +Execute(): string
}

IFunction <|.. BaseFunction
CamelCaseFunction -left-|> BaseFunction
ConcatenateFunction -right-|> BaseFunction
ConstantFunction -up-|> BaseFunction
VariableFunction --|> BaseFunction
TextFunction --|> BaseFunction
@enduml
