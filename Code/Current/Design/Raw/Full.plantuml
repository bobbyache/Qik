@startuml "Rough"
interface ISymbolTable <<interface>> {
    +Clear(): void
    +AddSymbol(symbol: ISymbol): void
}

interface ISymbolTerminal <<interface>> {
    +Symbols: string[]
    +InputSymbols: string[]
    +SetValue(inputSymbol: string, value: string): void
    +GetValue(symbol: string): string
}

interface IInterpreter <<interface>> {
    +Interpret(functionFactory: IFunctionFactory, scriptText: string): ISymbolTerminal
}

interface ISyntaxValidator <<interface>> {
    +event CompileError: EventHandler<SyntaxErrorEventArgs>
    +HasErrors: bool
    +Validate(scriptText: string): void
}

class Interpreter implements IInterpreter {
    +Interpret(functionFactory: IFunctionFactory, scriptText: string): ISymbolTerminal
    -InterpretExpressions(symbolTable: ISymbolTable, functionFactory: IFunctionFactory, scriptText: string): void
    -InterpretInputs(symbolTable: ISymbolTable, scriptText: string): void
}

class ExpressionVisitor {
    -symbolTable: ISymbolTable
    -functionFactory: IFunctionFactory
    +ExpressionVisitor(symbolTable: ISymbolTable, functionFactory: IFunctionFactory)
    +VisitFuncDecl(context: TemplateParser.FuncDeclContext): IFunction
    +VisitFunc(context: TemplateParser.FuncContext): IFunction
    +VisitIffExpr(context: TemplateParser.IffExprContext): IFunction
    +VisitIfExpr(context: TemplateParser.IfExprContext): IFunction
    +VisitSwitchExpr(context: TemplateParser.SwitchExprContext): IFunction
    +VisitExpr(context: TemplateParser.ExprContext): IFunction
}

class UiWidgetVisitor {
    -widgets: List<UiWidget>
    +UiWidgetVisitor(widgets: List<UiWidget>)
    +VisitInputDecl(context: TemplateParser.InputDeclContext): string
}

class UserInputVisitor {
    -symbolTable: ISymbolTable
    +UserInputVisitor(symbolTable: ISymbolTable)
    +VisitInputDecl(context: TemplateParser.InputDeclContext): string
}

class UiWidget {
    -name: string
    +UiWidget(name: string)
}

class InputSymbol {
    -name: string
    +InputSymbol(name: string)
}

class UiWidgetFactory {
    +BuildFromScript(scriptText: string): UiWidget[]
}

class SyntaxValidator implements ISyntaxValidator {
    +CompileError: EventHandler<SyntaxErrorEventArgs>
    +HasErrors: bool
    +Validate(scriptText: string): void
}

class SyntaxErrorEventArgs {
    +Line: int
    +Column: int
    +Message: string
    +OffendingSymbol: string
    +Location: string
    +SyntaxErrorEventArgs(location: string, line: int, column: int, offendingSymbol: string, message: string)
    +SyntaxErrorEventArgs(exception: Exception)
}

ISymbolTable --|> ISymbolTerminal
IInterpreter ..> ISymbolTerminal
Interpreter --> ExpressionVisitor
UiWidgetVisitor --> UiWidget
UserInputVisitor --> ISymbolTable
UserInputVisitor --> InputSymbol
UiWidgetFactory --> UiWidget
SyntaxValidator ..> SyntaxErrorEventArgs
ISyntaxValidator ..> SyntaxErrorEventArgs
@enduml
