@startuml "Full"
interface ISymbolTable <<interface>> {
    +Clear(): void
    +AddSymbol(symbol: ISymbol): void
}

interface ISymbolTerminal <<interface>> {
    +Symbols: string[]
    +InputSymbols: string[]
    +SetValue(inputSymbol: string, value: string): void
    +GetValue(symbol: string): string
}

interface IInterpreter <<interface>> {
    +Interpret(functionFactory: IFunctionFactory, scriptText: string): ISymbolTerminal
}

class Interpreter implements IInterpreter {
    +Interpret(functionFactory: IFunctionFactory, scriptText: string): ISymbolTerminal
    -InterpretExpressions(symbolTable: ISymbolTable, functionFactory: IFunctionFactory, scriptText: string): void
    -InterpretInputs(symbolTable: ISymbolTable, scriptText: string): void
}

class UiWidgetVisitor {
    -widgets: List<UiWidget>
    +UiWidgetVisitor(widgets: List<UiWidget>)
    +VisitInputDecl(context: TemplateParser.InputDeclContext): string
}

class UiWidget {
    -name: string
    +UiWidget(name: string)
}


ISymbolTable --|> ISymbolTerminal
IInterpreter ..> ISymbolTerminal
UiWidgetVisitor --> UiWidget
@enduml