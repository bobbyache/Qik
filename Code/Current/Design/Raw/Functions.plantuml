@startuml
interface IFunctionFactory <<interface>> {
    +GetFunction(name: string, functionArguments: List<IFunction>): IFunction
}

class FunctionFactory {
    -pluginLoader: IPluginLoader
    -functionTypes: Dictionary<string, Type>
    +FunctionFactory(pluginLoader: IPluginLoader)
    +GetFunction(name: string, functionArguments: List<IFunction>): IFunction
}

interface IPluginLoader <<interface>> {
    +Load(): void
    +GetFunction(name: string, functionArguments: List<IFunction>): IFunction
}

class PluginLoader {
    -functionTypes: Dictionary<string, Type>
    +GetFunction(name: string, functionArguments: List<IFunction>): IFunction
    +Load(): void
}

abstract class BaseFunction <<abstract>> {
    -functionArguments: List<IFunction>
    +Name: string
    +BaseFunction(name: string, functionArguments: List<IFunction>)
    +Execute(): string
}

class CamelCaseFunction {
    +CamelCaseFunction(name: string, functionArguments: List<IFunction>)
    +Execute(): string
}

class ConcatenateFunction {
    -functions: List<IFunction>
    +ConcatenateFunction(name: string)
    +Execute(): string
    +AddFunction(func: IFunction): void
}

class ConstantFunction {
    -text: string
    +ConstantFunction(name: string, text: string)
    +Execute(): string
}

class VariableFunction {
    -symbol: string
    -symbolTable: ISymbolTable
    +VariableFunction(name: string, symbolTable: ISymbolTable, symbol: string)
    +Execute(): string
}

class TextFunction {
    -text: string
    +TextFunction(name: string, text: string)
    +Execute(): string
}

IFunctionFactory <|.. FunctionFactory
IPluginLoader <|.. PluginLoader
IFunction <|.. BaseFunction
CamelCaseFunction --|> BaseFunction
ConcatenateFunction --|> BaseFunction
ConstantFunction --|> BaseFunction
VariableFunction --|> BaseFunction
TextFunction --|> BaseFunction
@enduml
