@startuml
interface IFunctionFactory <<interface>> {
    +GetFunction(name: string, functionArguments: List<IFunction>): IFunction
}

class FunctionFactory {
    -pluginLoader: IPluginLoader
    -functionTypes: Dictionary<string, Type>
    +FunctionFactory(pluginLoader: IPluginLoader)
    +GetFunction(name: string, functionArguments: List<IFunction>): IFunction
}

interface IPluginLoader <<interface>> {
    +Load(): void
    +GetFunction(name: string, functionArguments: List<IFunction>): IFunction
}

class PluginLoader {
    -functionTypes: Dictionary<string, Type>
    +GetFunction(name: string, functionArguments: List<IFunction>): IFunction
    +Load(): void
}

abstract class BaseFunction <<abstract>> {
    -functionArguments: List<IFunction>
    +Name: string
    +BaseFunction(name: string, functionArguments: List<IFunction>)
    +Execute(): string
}

interface IFunction <<interface>> {
    +Name: string
    +Execute(): string
}

IFunctionFactory <|.. FunctionFactory
IPluginLoader <|.. PluginLoader
FunctionFactory .right.|> IPluginLoader
PluginLoader ..|> IFunction
PluginLoader .left.|> BaseFunction
BaseFunction ..|> IFunction
@enduml
