//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Code\you\Qik\Code\Current\Qik\QikTemplate.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CygSoft.Qik.LanguageEngine.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class QikTemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		CONST=18, STRING=19, IDENTIFIER=20, VARIABLE=21, FLOAT=22, INT=23, WS=24, 
		COMMENT=25, LINE_COMMENT=26;
	public const int
		RULE_template = 0, RULE_ctrlDecl = 1, RULE_optionBox = 2, RULE_textBox = 3, 
		RULE_optionsBody = 4, RULE_singleOption = 5, RULE_exprDecl = 6, RULE_optExpr = 7, 
		RULE_ifOptExpr = 8, RULE_declArgs = 9, RULE_declArg = 10, RULE_expr = 11, 
		RULE_concatExpr = 12, RULE_func = 13, RULE_funcArg = 14;
	public static readonly string[] ruleNames = {
		"template", "ctrlDecl", "optionBox", "textBox", "optionsBody", "singleOption", 
		"exprDecl", "optExpr", "ifOptExpr", "declArgs", "declArg", "expr", "concatExpr", 
		"func", "funcArg"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'options'", "'['", "']'", "'{'", "'}'", "';'", "'text'", 
		"'return'", "','", "'option'", "'expression'", "'with'", "'if'", "'('", 
		"')'", "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "CONST", "STRING", "IDENTIFIER", "VARIABLE", 
		"FLOAT", "INT", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QikTemplate.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QikTemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QikTemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QikTemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TemplateContext : ParserRuleContext {
		public CtrlDeclContext[] ctrlDecl() {
			return GetRuleContexts<CtrlDeclContext>();
		}
		public CtrlDeclContext ctrlDecl(int i) {
			return GetRuleContext<CtrlDeclContext>(i);
		}
		public ExprDeclContext[] exprDecl() {
			return GetRuleContexts<ExprDeclContext>();
		}
		public ExprDeclContext exprDecl(int i) {
			return GetRuleContext<ExprDeclContext>(i);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 0, RULE_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 32;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 30; ctrlDecl();
					}
					break;
				case 2:
					{
					State = 31; exprDecl();
					}
					break;
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VARIABLE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtrlDeclContext : ParserRuleContext {
		public OptionBoxContext optionBox() {
			return GetRuleContext<OptionBoxContext>(0);
		}
		public TextBoxContext textBox() {
			return GetRuleContext<TextBoxContext>(0);
		}
		public CtrlDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctrlDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterCtrlDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitCtrlDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtrlDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtrlDeclContext ctrlDecl() {
		CtrlDeclContext _localctx = new CtrlDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_ctrlDecl);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; optionBox();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; textBox();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionBoxContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		public DeclArgsContext declArgs() {
			return GetRuleContext<DeclArgsContext>(0);
		}
		public OptionsBodyContext optionsBody() {
			return GetRuleContext<OptionsBodyContext>(0);
		}
		public OptionBoxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionBox; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterOptionBox(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitOptionBox(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBox(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionBoxContext optionBox() {
		OptionBoxContext _localctx = new OptionBoxContext(Context, State);
		EnterRule(_localctx, 4, RULE_optionBox);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(VARIABLE);
			State = 41; Match(T__0);
			State = 42; Match(T__1);
			State = 43; Match(T__2);
			State = 44; declArgs();
			State = 45; Match(T__3);
			State = 46; Match(T__4);
			State = 47; optionsBody();
			State = 48; Match(T__5);
			State = 49; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextBoxContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		public DeclArgsContext declArgs() {
			return GetRuleContext<DeclArgsContext>(0);
		}
		public TextBoxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textBox; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterTextBox(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitTextBox(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextBox(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextBoxContext textBox() {
		TextBoxContext _localctx = new TextBoxContext(Context, State);
		EnterRule(_localctx, 6, RULE_textBox);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(VARIABLE);
			State = 52; Match(T__0);
			State = 53; Match(T__7);
			State = 54; Match(T__2);
			State = 55; declArgs();
			State = 56; Match(T__3);
			State = 57; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsBodyContext : ParserRuleContext {
		public SingleOptionContext[] singleOption() {
			return GetRuleContexts<SingleOptionContext>();
		}
		public SingleOptionContext singleOption(int i) {
			return GetRuleContext<SingleOptionContext>(i);
		}
		public OptionsBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterOptionsBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitOptionsBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionsBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionsBodyContext optionsBody() {
		OptionsBodyContext _localctx = new OptionsBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_optionsBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(T__8);
			State = 65;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 60; singleOption();
					State = 61; Match(T__9);
					}
					} 
				}
				State = 67;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			{
			State = 68; singleOption();
			}
			State = 69; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleOptionContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		public DeclArgsContext declArgs() {
			return GetRuleContext<DeclArgsContext>(0);
		}
		public SingleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterSingleOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitSingleOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleOptionContext singleOption() {
		SingleOptionContext _localctx = new SingleOptionContext(Context, State);
		EnterRule(_localctx, 10, RULE_singleOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(T__10);
			State = 72; Match(STRING);
			State = 73; Match(T__2);
			State = 74; declArgs();
			State = 75; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprDeclContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		public DeclArgsContext declArgs() {
			return GetRuleContext<DeclArgsContext>(0);
		}
		public ConcatExprContext concatExpr() {
			return GetRuleContext<ConcatExprContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OptExprContext optExpr() {
			return GetRuleContext<OptExprContext>(0);
		}
		public ExprDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterExprDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitExprDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprDeclContext exprDecl() {
		ExprDeclContext _localctx = new ExprDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_exprDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(VARIABLE);
			State = 78; Match(T__0);
			State = 79; Match(T__11);
			State = 80; Match(T__2);
			State = 81; declArgs();
			State = 82; Match(T__3);
			State = 83; Match(T__4);
			State = 84; Match(T__8);
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 85; concatExpr();
				}
				break;
			case 2:
				{
				State = 86; expr();
				}
				break;
			case 3:
				{
				State = 87; optExpr();
				}
				break;
			}
			State = 90; Match(T__6);
			State = 91; Match(T__5);
			State = 92; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptExprContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		public IfOptExprContext[] ifOptExpr() {
			return GetRuleContexts<IfOptExprContext>();
		}
		public IfOptExprContext ifOptExpr(int i) {
			return GetRuleContext<IfOptExprContext>(i);
		}
		public OptExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterOptExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitOptExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptExprContext optExpr() {
		OptExprContext _localctx = new OptExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_optExpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(T__12);
			State = 95; Match(T__1);
			State = 96; Match(VARIABLE);
			State = 102;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 97; ifOptExpr();
					State = 98; Match(T__9);
					}
					} 
				}
				State = 104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 105; ifOptExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfOptExprContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		public ConcatExprContext concatExpr() {
			return GetRuleContext<ConcatExprContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IfOptExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifOptExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterIfOptExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitIfOptExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfOptExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfOptExprContext ifOptExpr() {
		IfOptExprContext _localctx = new IfOptExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifOptExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(T__13);
			State = 108; Match(T__14);
			State = 109; Match(STRING);
			State = 110; Match(T__15);
			State = 111; Match(T__8);
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 112; concatExpr();
				}
				break;
			case 2:
				{
				State = 113; expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclArgsContext : ParserRuleContext {
		public DeclArgContext[] declArg() {
			return GetRuleContexts<DeclArgContext>();
		}
		public DeclArgContext declArg(int i) {
			return GetRuleContext<DeclArgContext>(i);
		}
		public DeclArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterDeclArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitDeclArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclArgsContext declArgs() {
		DeclArgsContext _localctx = new DeclArgsContext(Context, State);
		EnterRule(_localctx, 18, RULE_declArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; declArg();
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 117; Match(T__9);
				State = 118; declArg();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclArgContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(QikTemplateParser.IDENTIFIER, 0); }
		public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		public DeclArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterDeclArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitDeclArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclArgContext declArg() {
		DeclArgContext _localctx = new DeclArgContext(Context, State);
		EnterRule(_localctx, 20, RULE_declArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(IDENTIFIER);
			State = 125; Match(T__0);
			State = 126; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		public ITerminalNode INT() { return GetToken(QikTemplateParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(QikTemplateParser.FLOAT, 0); }
		public ITerminalNode CONST() { return GetToken(QikTemplateParser.CONST, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_expr);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; func();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129; Match(STRING);
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 130; Match(VARIABLE);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 131; Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 132; Match(FLOAT);
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 6);
				{
				State = 133; Match(CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatExprContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ConcatExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterConcatExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitConcatExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatExprContext concatExpr() {
		ConcatExprContext _localctx = new ConcatExprContext(Context, State);
		EnterRule(_localctx, 24, RULE_concatExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; expr();
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 137; Match(T__16);
				State = 138; expr();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__16 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(QikTemplateParser.IDENTIFIER, 0); }
		public FuncArgContext[] funcArg() {
			return GetRuleContexts<FuncArgContext>();
		}
		public FuncArgContext funcArg(int i) {
			return GetRuleContext<FuncArgContext>(i);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 26, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(IDENTIFIER);
			State = 144; Match(T__14);
			State = 145; funcArg();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 146; Match(T__9);
				State = 147; funcArg();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncArgContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConcatExprContext concatExpr() {
			return GetRuleContext<ConcatExprContext>(0);
		}
		public FuncArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterFuncArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitFuncArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncArgContext funcArg() {
		FuncArgContext _localctx = new FuncArgContext(Context, State);
		EnterRule(_localctx, 28, RULE_funcArg);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155; expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156; concatExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '\xA2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x6', '\x2', '#', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '$', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x42', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\x45', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '[', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'g', '\n', '\t', '\f', '\t', 
		'\xE', '\t', 'j', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', 'u', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', 'z', '\n', '\v', '\f', '\v', '\xE', '\v', '}', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x89', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x6', '\xE', '\x8E', 
		'\n', '\xE', '\r', '\xE', '\xE', '\xE', '\x8F', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x97', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\x9A', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xA0', '\n', '\x10', '\x3', 
		'\x10', '\x2', '\x2', '\x11', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', '\x2', 
		'\x2', '\x2', '\xA3', '\x2', '\"', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'(', '\x3', '\x2', '\x2', '\x2', '\x6', '*', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x35', '\x3', '\x2', '\x2', '\x2', '\n', '=', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'I', '\x3', '\x2', '\x2', '\x2', '\xE', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '`', '\x3', '\x2', '\x2', '\x2', '\x12', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'v', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x18', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x9F', '\x3', '\x2', '\x2', '\x2', ' ', 
		'#', '\x5', '\x4', '\x3', '\x2', '!', '#', '\x5', '\xE', '\b', '\x2', 
		'\"', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', 
		'\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '&', ')', '\x5', '\x6', '\x4', '\x2', '\'', ')', 
		'\x5', '\b', '\x5', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', '(', 
		'\'', '\x3', '\x2', '\x2', '\x2', ')', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'*', '+', '\a', '\x17', '\x2', '\x2', '+', ',', '\a', '\x3', '\x2', '\x2', 
		',', '-', '\a', '\x4', '\x2', '\x2', '-', '.', '\a', '\x5', '\x2', '\x2', 
		'.', '/', '\x5', '\x14', '\v', '\x2', '/', '\x30', '\a', '\x6', '\x2', 
		'\x2', '\x30', '\x31', '\a', '\a', '\x2', '\x2', '\x31', '\x32', '\x5', 
		'\n', '\x6', '\x2', '\x32', '\x33', '\a', '\b', '\x2', '\x2', '\x33', 
		'\x34', '\a', '\t', '\x2', '\x2', '\x34', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x36', '\a', '\x17', '\x2', '\x2', '\x36', '\x37', '\a', '\x3', 
		'\x2', '\x2', '\x37', '\x38', '\a', '\n', '\x2', '\x2', '\x38', '\x39', 
		'\a', '\x5', '\x2', '\x2', '\x39', ':', '\x5', '\x14', '\v', '\x2', ':', 
		';', '\a', '\x6', '\x2', '\x2', ';', '<', '\a', '\t', '\x2', '\x2', '<', 
		'\t', '\x3', '\x2', '\x2', '\x2', '=', '\x43', '\a', '\v', '\x2', '\x2', 
		'>', '?', '\x5', '\f', '\a', '\x2', '?', '@', '\a', '\f', '\x2', '\x2', 
		'@', '\x42', '\x3', '\x2', '\x2', '\x2', '\x41', '>', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\x5', '\f', '\a', '\x2', 'G', 'H', '\a', '\t', '\x2', 
		'\x2', 'H', '\v', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\r', '\x2', 
		'\x2', 'J', 'K', '\a', '\x15', '\x2', '\x2', 'K', 'L', '\a', '\x5', '\x2', 
		'\x2', 'L', 'M', '\x5', '\x14', '\v', '\x2', 'M', 'N', '\a', '\x6', '\x2', 
		'\x2', 'N', '\r', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\x17', 
		'\x2', '\x2', 'P', 'Q', '\a', '\x3', '\x2', '\x2', 'Q', 'R', '\a', '\xE', 
		'\x2', '\x2', 'R', 'S', '\a', '\x5', '\x2', '\x2', 'S', 'T', '\x5', '\x14', 
		'\v', '\x2', 'T', 'U', '\a', '\x6', '\x2', '\x2', 'U', 'V', '\a', '\a', 
		'\x2', '\x2', 'V', 'Z', '\a', '\v', '\x2', '\x2', 'W', '[', '\x5', '\x1A', 
		'\xE', '\x2', 'X', '[', '\x5', '\x18', '\r', '\x2', 'Y', '[', '\x5', '\x10', 
		'\t', '\x2', 'Z', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\a', '\t', '\x2', '\x2', ']', '^', '\a', 
		'\b', '\x2', '\x2', '^', '_', '\a', '\t', '\x2', '\x2', '_', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\a', '\xF', '\x2', '\x2', '\x61', '\x62', 
		'\a', '\x4', '\x2', '\x2', '\x62', 'h', '\a', '\x17', '\x2', '\x2', '\x63', 
		'\x64', '\x5', '\x12', '\n', '\x2', '\x64', '\x65', '\a', '\f', '\x2', 
		'\x2', '\x65', 'g', '\x3', '\x2', '\x2', '\x2', '\x66', '\x63', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 
		'k', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x5', '\x12', '\n', '\x2', 'l', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\a', '\x10', '\x2', '\x2', 'n', 'o', '\a', '\x11', '\x2', 
		'\x2', 'o', 'p', '\a', '\x15', '\x2', '\x2', 'p', 'q', '\a', '\x12', '\x2', 
		'\x2', 'q', 't', '\a', '\v', '\x2', '\x2', 'r', 'u', '\x5', '\x1A', '\xE', 
		'\x2', 's', 'u', '\x5', '\x18', '\r', '\x2', 't', 'r', '\x3', '\x2', '\x2', 
		'\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 'u', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'v', '{', '\x5', '\x16', '\f', '\x2', 'w', 'x', '\a', '\f', 
		'\x2', '\x2', 'x', 'z', '\x5', '\x16', '\f', '\x2', 'y', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', 
		'\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\a', '\x16', '\x2', '\x2', '\x7F', '\x80', '\a', '\x3', '\x2', '\x2', 
		'\x80', '\x81', '\a', '\x15', '\x2', '\x2', '\x81', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x89', '\x5', '\x1C', '\xF', '\x2', '\x83', '\x89', 
		'\a', '\x15', '\x2', '\x2', '\x84', '\x89', '\a', '\x17', '\x2', '\x2', 
		'\x85', '\x89', '\a', '\x19', '\x2', '\x2', '\x86', '\x89', '\a', '\x18', 
		'\x2', '\x2', '\x87', '\x89', '\a', '\x14', '\x2', '\x2', '\x88', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x84', '\x3', '\x2', '\x2', '\x2', '\x88', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x8D', '\x5', '\x18', '\r', '\x2', '\x8B', '\x8C', '\a', '\x13', 
		'\x2', '\x2', '\x8C', '\x8E', '\x5', '\x18', '\r', '\x2', '\x8D', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\a', '\x16', '\x2', '\x2', '\x92', '\x93', '\a', '\x11', '\x2', '\x2', 
		'\x93', '\x98', '\x5', '\x1E', '\x10', '\x2', '\x94', '\x95', '\a', '\f', 
		'\x2', '\x2', '\x95', '\x97', '\x5', '\x1E', '\x10', '\x2', '\x96', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\a', '\x12', '\x2', '\x2', 
		'\x9C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\xA0', '\x5', '\x18', 
		'\r', '\x2', '\x9E', '\xA0', '\x5', '\x1A', '\xE', '\x2', '\x9F', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xE', '\"', '$', '(', '\x43', 
		'Z', 'h', 't', '{', '\x88', '\x8F', '\x98', '\x9F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CygSoft.Qik.LanguageEngine.Antlr
