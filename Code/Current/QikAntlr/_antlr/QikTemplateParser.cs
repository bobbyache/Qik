//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Code\bobbyache\Qik\Code\Current\QikAntlr\QikTemplate.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CygSoft.Qik.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class QikTemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, CONST=23, STRING=24, 
		IDENTIFIER=25, VARIABLE=26, FLOAT=27, INT=28, WS=29, COMMENT=30, LINE_COMMENT=31;
	public const int
		RULE_template = 0, RULE_inputDecl = 1, RULE_uiWidget = 2, RULE_uiWidgetProperty = 3, 
		RULE_uiWidgetKey = 4, RULE_funcDecl = 5, RULE_stat = 6, RULE_expr = 7, 
		RULE_compExpr = 8, RULE_concatExpr = 9, RULE_iffExpr = 10, RULE_iffTrueStat = 11, 
		RULE_iffFalseStat = 12, RULE_ifExpr = 13, RULE_ifStat = 14, RULE_elseIfStat = 15, 
		RULE_switchExpr = 16, RULE_switchStat = 17, RULE_caseStat = 18, RULE_elseStat = 19, 
		RULE_func = 20, RULE_funcArg = 21;
	public static readonly string[] ruleNames = {
		"template", "inputDecl", "uiWidget", "uiWidgetProperty", "uiWidgetKey", 
		"funcDecl", "stat", "expr", "compExpr", "concatExpr", "iffExpr", "iffTrueStat", 
		"iffFalseStat", "ifExpr", "ifStat", "elseIfStat", "switchExpr", "switchStat", 
		"caseStat", "elseStat", "func", "funcArg"
	};

	private static readonly string[] _LiteralNames = {
		null, "'=>'", "';'", "'['", "','", "']'", "'='", "'title'", "'type'", 
		"'=='", "'!='", "'+'", "'?'", "':'", "'if'", "'then'", "'else if'", "'switch'", 
		"'case'", "'else'", "'()'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "CONST", 
		"STRING", "IDENTIFIER", "VARIABLE", "FLOAT", "INT", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QikTemplate.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QikTemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QikTemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QikTemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputDeclContext[] inputDecl() {
			return GetRuleContexts<InputDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputDeclContext inputDecl(int i) {
			return GetRuleContext<InputDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 0, RULE_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 46;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 44;
					inputDecl();
					}
					break;
				case 2:
					{
					State = 45;
					funcDecl();
					}
					break;
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__2 || _la==VARIABLE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UiWidgetContext uiWidget() {
			return GetRuleContext<UiWidgetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		public InputDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterInputDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitInputDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputDeclContext inputDecl() {
		InputDeclContext _localctx = new InputDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_inputDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 50;
				uiWidget();
				State = 51;
				Match(VARIABLE);
				State = 52;
				Match(T__0);
				State = 53;
				Match(STRING);
				State = 54;
				Match(T__1);
				}
				break;
			case VARIABLE:
				{
				State = 56;
				Match(VARIABLE);
				State = 57;
				Match(T__0);
				State = 58;
				Match(STRING);
				State = 59;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UiWidgetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UiWidgetPropertyContext[] uiWidgetProperty() {
			return GetRuleContexts<UiWidgetPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UiWidgetPropertyContext uiWidgetProperty(int i) {
			return GetRuleContext<UiWidgetPropertyContext>(i);
		}
		public UiWidgetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uiWidget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterUiWidget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitUiWidget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUiWidget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UiWidgetContext uiWidget() {
		UiWidgetContext _localctx = new UiWidgetContext(Context, State);
		EnterRule(_localctx, 4, RULE_uiWidget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(T__2);
			State = 63;
			uiWidgetProperty();
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 64;
				Match(T__3);
				State = 65;
				uiWidgetProperty();
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UiWidgetPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UiWidgetKeyContext uiWidgetKey() {
			return GetRuleContext<UiWidgetKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		public UiWidgetPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uiWidgetProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterUiWidgetProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitUiWidgetProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUiWidgetProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UiWidgetPropertyContext uiWidgetProperty() {
		UiWidgetPropertyContext _localctx = new UiWidgetPropertyContext(Context, State);
		EnterRule(_localctx, 6, RULE_uiWidgetProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			uiWidgetKey();
			State = 74;
			Match(T__5);
			State = 75;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UiWidgetKeyContext : ParserRuleContext {
		public UiWidgetKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uiWidgetKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterUiWidgetKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitUiWidgetKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUiWidgetKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UiWidgetKeyContext uiWidgetKey() {
		UiWidgetKeyContext _localctx = new UiWidgetKeyContext(Context, State);
		EnterRule(_localctx, 8, RULE_uiWidgetKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchExprContext switchExpr() {
			return GetRuleContext<SwitchExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExprContext ifExpr() {
			return GetRuleContext<IfExprContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_funcDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(VARIABLE);
			State = 80;
			Match(T__0);
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
			case STRING:
			case IDENTIFIER:
			case VARIABLE:
			case FLOAT:
			case INT:
				{
				State = 81;
				stat();
				}
				break;
			case T__16:
				{
				State = 82;
				switchExpr();
				}
				break;
			case T__13:
				{
				State = 83;
				ifExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 86;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IffExprContext iffExpr() {
			return GetRuleContext<IffExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatExprContext concatExpr() {
			return GetRuleContext<ConcatExprContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 12, RULE_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 88;
				expr();
				}
				break;
			case 2:
				{
				State = 89;
				iffExpr();
				}
				break;
			case 3:
				{
				State = 90;
				concatExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(QikTemplateParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(QikTemplateParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(QikTemplateParser.CONST, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_expr);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93;
				func();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94;
				Match(STRING);
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95;
				Match(VARIABLE);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 96;
				Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 97;
				Match(FLOAT);
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 6);
				{
				State = 98;
				Match(CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterCompExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitCompExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompExprContext compExpr() {
		CompExprContext _localctx = new CompExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_compExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			expr();
			State = 102;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 103;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ConcatExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterConcatExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitConcatExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatExprContext concatExpr() {
		ConcatExprContext _localctx = new ConcatExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_concatExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			expr();
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 106;
				Match(T__10);
				State = 107;
				expr();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__10 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IffExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompExprContext compExpr() {
			return GetRuleContext<CompExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IffTrueStatContext iffTrueStat() {
			return GetRuleContext<IffTrueStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IffFalseStatContext iffFalseStat() {
			return GetRuleContext<IffFalseStatContext>(0);
		}
		public IffExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iffExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterIffExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitIffExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIffExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IffExprContext iffExpr() {
		IffExprContext _localctx = new IffExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_iffExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			compExpr();
			State = 113;
			iffTrueStat();
			State = 114;
			iffFalseStat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IffTrueStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public IffTrueStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iffTrueStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterIffTrueStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitIffTrueStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIffTrueStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IffTrueStatContext iffTrueStat() {
		IffTrueStatContext _localctx = new IffTrueStatContext(Context, State);
		EnterRule(_localctx, 22, RULE_iffTrueStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(T__11);
			State = 117;
			stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IffFalseStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public IffFalseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iffFalseStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterIffFalseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitIffFalseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIffFalseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IffFalseStatContext iffFalseStat() {
		IffFalseStatContext _localctx = new IffFalseStatContext(Context, State);
		EnterRule(_localctx, 24, RULE_iffFalseStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(T__12);
			State = 120;
			stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatContext elseStat() {
			return GetRuleContext<ElseStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatContext[] elseIfStat() {
			return GetRuleContexts<ElseIfStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatContext elseIfStat(int i) {
			return GetRuleContext<ElseIfStatContext>(i);
		}
		public IfExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterIfExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitIfExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExprContext ifExpr() {
		IfExprContext _localctx = new IfExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ifStat();
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 123;
				elseIfStat();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129;
			elseStat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompExprContext compExpr() {
			return GetRuleContext<CompExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(T__13);
			State = 132;
			compExpr();
			State = 133;
			Match(T__14);
			State = 134;
			stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompExprContext compExpr() {
			return GetRuleContext<CompExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ElseIfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterElseIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitElseIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatContext elseIfStat() {
		ElseIfStatContext _localctx = new ElseIfStatContext(Context, State);
		EnterRule(_localctx, 30, RULE_elseIfStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(T__15);
			State = 137;
			compExpr();
			State = 138;
			Match(T__14);
			State = 139;
			stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatContext switchStat() {
			return GetRuleContext<SwitchStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatContext elseStat() {
			return GetRuleContext<ElseStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatContext[] caseStat() {
			return GetRuleContexts<CaseStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatContext caseStat(int i) {
			return GetRuleContext<CaseStatContext>(i);
		}
		public SwitchExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterSwitchExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitSwitchExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchExprContext switchExpr() {
		SwitchExprContext _localctx = new SwitchExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_switchExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			switchStat();
			{
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 142;
				caseStat();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__17 );
			State = 147;
			elseStat();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SwitchStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterSwitchStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitSwitchStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatContext switchStat() {
		SwitchStatContext _localctx = new SwitchStatContext(Context, State);
		EnterRule(_localctx, 34, RULE_switchStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(T__16);
			State = 150;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public CaseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterCaseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitCaseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatContext caseStat() {
		CaseStatContext _localctx = new CaseStatContext(Context, State);
		EnterRule(_localctx, 36, RULE_caseStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(T__17);
			State = 153;
			Match(STRING);
			State = 154;
			Match(T__14);
			State = 155;
			stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ElseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterElseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitElseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatContext elseStat() {
		ElseStatContext _localctx = new ElseStatContext(Context, State);
		EnterRule(_localctx, 38, RULE_elseStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(T__18);
			State = 158;
			stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QikTemplateParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncArgContext[] funcArg() {
			return GetRuleContexts<FuncArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncArgContext funcArg(int i) {
			return GetRuleContext<FuncArgContext>(i);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 40, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(IDENTIFIER);
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				{
				State = 161;
				Match(T__19);
				}
				break;
			case T__20:
				{
				State = 162;
				Match(T__20);
				State = 163;
				funcArg();
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 164;
					Match(T__3);
					State = 165;
					funcArg();
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 171;
				Match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatExprContext concatExpr() {
			return GetRuleContext<ConcatExprContext>(0);
		}
		public FuncArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterFuncArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitFuncArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncArgContext funcArg() {
		FuncArgContext _localctx = new FuncArgContext(Context, State);
		EnterRule(_localctx, 42, RULE_funcArg);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				concatExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '!', '\xB6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x6', '\x2', '\x31', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x32', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '?', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\x45', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'H', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'W', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '^', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x66', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x6', '\v', 'o', '\n', '\v', '\r', '\v', '\xE', '\v', 'p', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\x7F', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x82', 
		'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x6', '\x12', '\x92', '\n', '\x12', '\r', '\x12', '\xE', '\x12', '\x93', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', 
		'\xA9', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xAC', '\v', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xB0', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\xB4', '\n', '\x17', '\x3', '\x17', 
		'\x2', '\x2', '\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '\x2', '\x4', '\x3', '\x2', '\t', '\n', '\x3', '\x2', 
		'\v', '\f', '\x2', '\xB2', '\x2', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '>', '\x3', '\x2', '\x2', '\x2', '\x6', '@', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'K', '\x3', '\x2', '\x2', '\x2', '\n', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'Q', '\x3', '\x2', '\x2', '\x2', '\xE', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x65', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x14', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 'r', '\x3', '\x2', '\x2', '\x2', '\x18', 'v', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', 'y', '\x3', '\x2', '\x2', '\x2', '\x1C', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x85', '\x3', '\x2', '\x2', '\x2', ' ', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x97', '\x3', '\x2', '\x2', '\x2', '&', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '(', '\x9F', '\x3', '\x2', '\x2', '\x2', '*', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', ',', '\xB3', '\x3', '\x2', '\x2', '\x2', '.', '\x31', '\x5', 
		'\x4', '\x3', '\x2', '/', '\x31', '\x5', '\f', '\a', '\x2', '\x30', '.', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x5', '\x6', '\x4', '\x2', '\x35', 
		'\x36', '\a', '\x1C', '\x2', '\x2', '\x36', '\x37', '\a', '\x3', '\x2', 
		'\x2', '\x37', '\x38', '\a', '\x1A', '\x2', '\x2', '\x38', '\x39', '\a', 
		'\x4', '\x2', '\x2', '\x39', '?', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\a', '\x1C', '\x2', '\x2', ';', '<', '\a', '\x3', '\x2', '\x2', '<', 
		'=', '\a', '\x1A', '\x2', '\x2', '=', '?', '\a', '\x4', '\x2', '\x2', 
		'>', '\x34', '\x3', '\x2', '\x2', '\x2', '>', ':', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x5', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '\x5', 
		'\x2', '\x2', '\x41', '\x46', '\x5', '\b', '\x5', '\x2', '\x42', '\x43', 
		'\a', '\x6', '\x2', '\x2', '\x43', '\x45', '\x5', '\b', '\x5', '\x2', 
		'\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'I', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\a', '\x2', '\x2', 
		'J', '\a', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x5', '\n', '\x6', '\x2', 
		'L', 'M', '\a', '\b', '\x2', '\x2', 'M', 'N', '\a', '\x1A', '\x2', '\x2', 
		'N', '\t', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\t', '\x2', '\x2', '\x2', 
		'P', '\v', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '\x1C', '\x2', 
		'\x2', 'R', 'V', '\a', '\x3', '\x2', '\x2', 'S', 'W', '\x5', '\xE', '\b', 
		'\x2', 'T', 'W', '\x5', '\"', '\x12', '\x2', 'U', 'W', '\x5', '\x1C', 
		'\xF', '\x2', 'V', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\a', '\x4', '\x2', '\x2', 'Y', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '^', '\x5', '\x10', '\t', '\x2', '[', '^', '\x5', '\x16', 
		'\f', '\x2', '\\', '^', '\x5', '\x14', '\v', '\x2', ']', 'Z', '\x3', '\x2', 
		'\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', ']', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', '\xF', '\x3', '\x2', '\x2', '\x2', '_', '\x66', 
		'\x5', '*', '\x16', '\x2', '`', '\x66', '\a', '\x1A', '\x2', '\x2', '\x61', 
		'\x66', '\a', '\x1C', '\x2', '\x2', '\x62', '\x66', '\a', '\x1E', '\x2', 
		'\x2', '\x63', '\x66', '\a', '\x1D', '\x2', '\x2', '\x64', '\x66', '\a', 
		'\x19', '\x2', '\x2', '\x65', '_', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x65', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\x11', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x5', '\x10', '\t', '\x2', 
		'h', 'i', '\t', '\x3', '\x2', '\x2', 'i', 'j', '\x5', '\x10', '\t', '\x2', 
		'j', '\x13', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x5', '\x10', '\t', 
		'\x2', 'l', 'm', '\a', '\r', '\x2', '\x2', 'm', 'o', '\x5', '\x10', '\t', 
		'\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'q', '\x15', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x5', '\x12', 
		'\n', '\x2', 's', 't', '\x5', '\x18', '\r', '\x2', 't', 'u', '\x5', '\x1A', 
		'\xE', '\x2', 'u', '\x17', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', 
		'\xE', '\x2', '\x2', 'w', 'x', '\x5', '\xE', '\b', '\x2', 'x', '\x19', 
		'\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', '\xF', '\x2', '\x2', 'z', 
		'{', '\x5', '\xE', '\b', '\x2', '{', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x80', '\x5', '\x1E', '\x10', '\x2', '}', '\x7F', '\x5', ' ', '\x11', 
		'\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x5', '(', 
		'\x15', '\x2', '\x84', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', 
		'\a', '\x10', '\x2', '\x2', '\x86', '\x87', '\x5', '\x12', '\n', '\x2', 
		'\x87', '\x88', '\a', '\x11', '\x2', '\x2', '\x88', '\x89', '\x5', '\xE', 
		'\b', '\x2', '\x89', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', 
		'\a', '\x12', '\x2', '\x2', '\x8B', '\x8C', '\x5', '\x12', '\n', '\x2', 
		'\x8C', '\x8D', '\a', '\x11', '\x2', '\x2', '\x8D', '\x8E', '\x5', '\xE', 
		'\b', '\x2', '\x8E', '!', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x91', 
		'\x5', '$', '\x13', '\x2', '\x90', '\x92', '\x5', '&', '\x14', '\x2', 
		'\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x96', '\x5', '(', '\x15', '\x2', '\x96', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x98', '\a', '\x13', '\x2', '\x2', '\x98', '\x99', 
		'\x5', '\x10', '\t', '\x2', '\x99', '%', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9B', '\a', '\x14', '\x2', '\x2', '\x9B', '\x9C', '\a', '\x1A', '\x2', 
		'\x2', '\x9C', '\x9D', '\a', '\x11', '\x2', '\x2', '\x9D', '\x9E', '\x5', 
		'\xE', '\b', '\x2', '\x9E', '\'', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA0', '\a', '\x15', '\x2', '\x2', '\xA0', '\xA1', '\x5', '\xE', '\b', 
		'\x2', '\xA1', ')', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xAF', '\a', 
		'\x1B', '\x2', '\x2', '\xA3', '\xB0', '\a', '\x16', '\x2', '\x2', '\xA4', 
		'\xA5', '\a', '\x17', '\x2', '\x2', '\xA5', '\xAA', '\x5', ',', '\x17', 
		'\x2', '\xA6', '\xA7', '\a', '\x6', '\x2', '\x2', '\xA7', '\xA9', '\x5', 
		',', '\x17', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', '\x18', '\x2', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '+', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB4', '\x5', '\x10', '\t', '\x2', '\xB2', '\xB4', '\x5', '\x14', '\v', 
		'\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '-', '\x3', '\x2', '\x2', '\x2', '\xF', '\x30', 
		'\x32', '>', '\x46', 'V', ']', '\x65', 'p', '\x80', '\x93', '\xAA', '\xAF', 
		'\xB3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CygSoft.Qik.Antlr
