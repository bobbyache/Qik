//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Code\you\Qik\Code\Current\QikAntlr\QikTemplate.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CygSoft.Qik.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class QikTemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, CONST=9, 
		STRING=10, IDENTIFIER=11, VARIABLE=12, FLOAT=13, INT=14, WS=15, COMMENT=16, 
		LINE_COMMENT=17;
	public const int
		RULE_template = 0, RULE_inputDecl = 1, RULE_funcDecl = 2, RULE_expr = 3, 
		RULE_concatExpr = 4, RULE_func = 5, RULE_funcArg = 6;
	public static readonly string[] ruleNames = {
		"template", "inputDecl", "funcDecl", "expr", "concatExpr", "func", "funcArg"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'=>'", "'+'", "'()'", "'('", "','", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "CONST", "STRING", 
		"IDENTIFIER", "VARIABLE", "FLOAT", "INT", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QikTemplate.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QikTemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QikTemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QikTemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TemplateContext : ParserRuleContext {
		public InputDeclContext[] inputDecl() {
			return GetRuleContexts<InputDeclContext>();
		}
		public InputDeclContext inputDecl(int i) {
			return GetRuleContext<InputDeclContext>(i);
		}
		public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 0, RULE_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 16;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 14; inputDecl();
					}
					break;
				case 2:
					{
					State = 15; funcDecl();
					}
					break;
				}
				}
				State = 18;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VARIABLE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputDeclContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		public InputDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterInputDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitInputDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputDeclContext inputDecl() {
		InputDeclContext _localctx = new InputDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_inputDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; Match(VARIABLE);
			State = 21; Match(T__0);
			State = 22; Match(STRING);
			State = 23; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		public ConcatExprContext concatExpr() {
			return GetRuleContext<ConcatExprContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_funcDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; Match(VARIABLE);
			State = 26; Match(T__2);
			State = 29;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 27; concatExpr();
				}
				break;
			case 2:
				{
				State = 28; expr();
				}
				break;
			}
			State = 31; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		public ITerminalNode INT() { return GetToken(QikTemplateParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(QikTemplateParser.FLOAT, 0); }
		public ITerminalNode CONST() { return GetToken(QikTemplateParser.CONST, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_expr);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33; func();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34; Match(STRING);
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 35; Match(VARIABLE);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 36; Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 37; Match(FLOAT);
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 6);
				{
				State = 38; Match(CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatExprContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ConcatExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterConcatExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitConcatExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatExprContext concatExpr() {
		ConcatExprContext _localctx = new ConcatExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_concatExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; expr();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 42; Match(T__3);
				State = 43; expr();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(QikTemplateParser.IDENTIFIER, 0); }
		public FuncArgContext[] funcArg() {
			return GetRuleContexts<FuncArgContext>();
		}
		public FuncArgContext funcArg(int i) {
			return GetRuleContext<FuncArgContext>(i);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 10, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(IDENTIFIER);
			State = 61;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				State = 49; Match(T__4);
				}
				break;
			case T__5:
				{
				State = 50; Match(T__5);
				State = 51; funcArg();
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 52; Match(T__6);
					State = 53; funcArg();
					}
					}
					State = 58;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 59; Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncArgContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConcatExprContext concatExpr() {
			return GetRuleContext<ConcatExprContext>(0);
		}
		public FuncArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterFuncArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitFuncArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncArgContext funcArg() {
		FuncArgContext _localctx = new FuncArgContext(Context, State);
		EnterRule(_localctx, 12, RULE_funcArg);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; concatExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', '\x46', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x13', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '\x14', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', ' ', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '*', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x6', '\x6', '/', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\x30', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', '\x39', '\n', '\a', '\f', '\a', '\xE', '\a', '<', '\v', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '@', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x44', '\n', '\b', '\x3', '\b', '\x2', '\x2', 
		'\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x2', '\x2', '\x2', 
		'J', '\x2', '\x12', '\x3', '\x2', '\x2', '\x2', '\x4', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x1B', '\x3', '\x2', '\x2', '\x2', '\b', 
		')', '\x3', '\x2', '\x2', '\x2', '\n', '+', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x32', '\x3', '\x2', '\x2', '\x2', '\xE', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x13', '\x5', '\x4', '\x3', '\x2', '\x11', '\x13', 
		'\x5', '\x6', '\x4', '\x2', '\x12', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x11', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x17', '\a', '\xE', '\x2', '\x2', '\x17', '\x18', '\a', '\x3', 
		'\x2', '\x2', '\x18', '\x19', '\a', '\f', '\x2', '\x2', '\x19', '\x1A', 
		'\a', '\x4', '\x2', '\x2', '\x1A', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\x1C', '\a', '\xE', '\x2', '\x2', '\x1C', '\x1F', '\a', '\x5', 
		'\x2', '\x2', '\x1D', ' ', '\x5', '\n', '\x6', '\x2', '\x1E', ' ', '\x5', 
		'\b', '\x5', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\a', '\x4', '\x2', '\x2', '\"', '\a', '\x3', '\x2', '\x2', 
		'\x2', '#', '*', '\x5', '\f', '\a', '\x2', '$', '*', '\a', '\f', '\x2', 
		'\x2', '%', '*', '\a', '\xE', '\x2', '\x2', '&', '*', '\a', '\x10', '\x2', 
		'\x2', '\'', '*', '\a', '\xF', '\x2', '\x2', '(', '*', '\a', '\v', '\x2', 
		'\x2', ')', '#', '\x3', '\x2', '\x2', '\x2', ')', '$', '\x3', '\x2', '\x2', 
		'\x2', ')', '%', '\x3', '\x2', '\x2', '\x2', ')', '&', '\x3', '\x2', '\x2', 
		'\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '\t', '\x3', '\x2', '\x2', '\x2', '+', '.', '\x5', 
		'\b', '\x5', '\x2', ',', '-', '\a', '\x6', '\x2', '\x2', '-', '/', '\x5', 
		'\b', '\x5', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '?', '\a', '\r', '\x2', '\x2', '\x33', '@', '\a', '\a', 
		'\x2', '\x2', '\x34', '\x35', '\a', '\b', '\x2', '\x2', '\x35', ':', '\x5', 
		'\xE', '\b', '\x2', '\x36', '\x37', '\a', '\t', '\x2', '\x2', '\x37', 
		'\x39', '\x5', '\xE', '\b', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '<', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x3', '\x2', 
		'\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\n', 
		'\x2', '\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', '?', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '?', '\x34', '\x3', '\x2', '\x2', '\x2', '@', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x44', '\x5', '\b', '\x5', '\x2', 
		'\x42', '\x44', '\x5', '\n', '\x6', '\x2', '\x43', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x12', '\x14', '\x1F', ')', '\x30', 
		':', '?', '\x43',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CygSoft.Qik.Antlr
