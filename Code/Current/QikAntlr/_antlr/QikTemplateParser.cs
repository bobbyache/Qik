//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Code\you\Qik\Code\Current\QikAntlr\QikTemplate.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CygSoft.Qik.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class QikTemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, CONST=15, STRING=16, 
		IDENTIFIER=17, VARIABLE=18, FLOAT=19, INT=20, WS=21, COMMENT=22, LINE_COMMENT=23;
	public const int
		RULE_template = 0, RULE_inputDecl = 1, RULE_funcDecl = 2, RULE_expr = 3, 
		RULE_compExpr = 4, RULE_concatExpr = 5, RULE_iffExpr = 6, RULE_switchExpr = 7, 
		RULE_switchStat = 8, RULE_caseStat = 9, RULE_elseStat = 10, RULE_func = 11, 
		RULE_funcArg = 12;
	public static readonly string[] ruleNames = {
		"template", "inputDecl", "funcDecl", "expr", "compExpr", "concatExpr", 
		"iffExpr", "switchExpr", "switchStat", "caseStat", "elseStat", "func", 
		"funcArg"
	};

	private static readonly string[] _LiteralNames = {
		null, "'=>'", "';'", "'=='", "'!='", "'+'", "'?'", "':'", "'switch'", 
		"'case'", "'else'", "'()'", "'('", "','", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "CONST", "STRING", "IDENTIFIER", "VARIABLE", "FLOAT", 
		"INT", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QikTemplate.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QikTemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QikTemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QikTemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TemplateContext : ParserRuleContext {
		public InputDeclContext[] inputDecl() {
			return GetRuleContexts<InputDeclContext>();
		}
		public InputDeclContext inputDecl(int i) {
			return GetRuleContext<InputDeclContext>(i);
		}
		public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 0, RULE_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 28;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 26; inputDecl();
					}
					break;
				case 2:
					{
					State = 27; funcDecl();
					}
					break;
				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VARIABLE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputDeclContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		public InputDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterInputDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitInputDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputDeclContext inputDecl() {
		InputDeclContext _localctx = new InputDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_inputDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(VARIABLE);
			State = 33; Match(T__0);
			State = 34; Match(STRING);
			State = 35; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConcatExprContext concatExpr() {
			return GetRuleContext<ConcatExprContext>(0);
		}
		public IffExprContext iffExpr() {
			return GetRuleContext<IffExprContext>(0);
		}
		public SwitchExprContext switchExpr() {
			return GetRuleContext<SwitchExprContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_funcDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(VARIABLE);
			State = 38; Match(T__0);
			State = 43;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 39; expr();
				}
				break;
			case 2:
				{
				State = 40; concatExpr();
				}
				break;
			case 3:
				{
				State = 41; iffExpr();
				}
				break;
			case 4:
				{
				State = 42; switchExpr();
				}
				break;
			}
			State = 45; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		public ITerminalNode VARIABLE() { return GetToken(QikTemplateParser.VARIABLE, 0); }
		public ITerminalNode INT() { return GetToken(QikTemplateParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(QikTemplateParser.FLOAT, 0); }
		public ITerminalNode CONST() { return GetToken(QikTemplateParser.CONST, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_expr);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; func();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; Match(STRING);
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 49; Match(VARIABLE);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 50; Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 51; Match(FLOAT);
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 6);
				{
				State = 52; Match(CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompExprContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterCompExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitCompExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompExprContext compExpr() {
		CompExprContext _localctx = new CompExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_compExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; expr();
			State = 56;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 57; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatExprContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ConcatExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterConcatExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitConcatExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatExprContext concatExpr() {
		ConcatExprContext _localctx = new ConcatExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_concatExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; expr();
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 60; Match(T__4);
				State = 61; expr();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__4 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IffExprContext : ParserRuleContext {
		public CompExprContext compExpr() {
			return GetRuleContext<CompExprContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IffExprContext[] iffExpr() {
			return GetRuleContexts<IffExprContext>();
		}
		public IffExprContext iffExpr(int i) {
			return GetRuleContext<IffExprContext>(i);
		}
		public ConcatExprContext[] concatExpr() {
			return GetRuleContexts<ConcatExprContext>();
		}
		public ConcatExprContext concatExpr(int i) {
			return GetRuleContext<ConcatExprContext>(i);
		}
		public IffExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iffExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterIffExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitIffExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIffExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IffExprContext iffExpr() {
		IffExprContext _localctx = new IffExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_iffExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; compExpr();
			State = 67; Match(T__5);
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 68; expr();
				}
				break;
			case 2:
				{
				State = 69; iffExpr();
				}
				break;
			case 3:
				{
				State = 70; concatExpr();
				}
				break;
			}
			State = 73; Match(T__6);
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 74; expr();
				}
				break;
			case 2:
				{
				State = 75; iffExpr();
				}
				break;
			case 3:
				{
				State = 76; concatExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchExprContext : ParserRuleContext {
		public SwitchStatContext switchStat() {
			return GetRuleContext<SwitchStatContext>(0);
		}
		public ElseStatContext elseStat() {
			return GetRuleContext<ElseStatContext>(0);
		}
		public CaseStatContext[] caseStat() {
			return GetRuleContexts<CaseStatContext>();
		}
		public CaseStatContext caseStat(int i) {
			return GetRuleContext<CaseStatContext>(i);
		}
		public SwitchExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterSwitchExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitSwitchExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchExprContext switchExpr() {
		SwitchExprContext _localctx = new SwitchExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_switchExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; switchStat();
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 80; caseStat();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__8 );
			State = 85; elseStat();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SwitchStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterSwitchStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitSwitchStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatContext switchStat() {
		SwitchStatContext _localctx = new SwitchStatContext(Context, State);
		EnterRule(_localctx, 16, RULE_switchStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(T__7);
			State = 88; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(QikTemplateParser.STRING, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IffExprContext iffExpr() {
			return GetRuleContext<IffExprContext>(0);
		}
		public ConcatExprContext concatExpr() {
			return GetRuleContext<ConcatExprContext>(0);
		}
		public CaseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterCaseStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitCaseStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatContext caseStat() {
		CaseStatContext _localctx = new CaseStatContext(Context, State);
		EnterRule(_localctx, 18, RULE_caseStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(T__8);
			State = 91; Match(STRING);
			State = 92; Match(T__6);
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 93; expr();
				}
				break;
			case 2:
				{
				State = 94; iffExpr();
				}
				break;
			case 3:
				{
				State = 95; concatExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IffExprContext iffExpr() {
			return GetRuleContext<IffExprContext>(0);
		}
		public ConcatExprContext concatExpr() {
			return GetRuleContext<ConcatExprContext>(0);
		}
		public ElseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterElseStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitElseStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatContext elseStat() {
		ElseStatContext _localctx = new ElseStatContext(Context, State);
		EnterRule(_localctx, 20, RULE_elseStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(T__9);
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 99; expr();
				}
				break;
			case 2:
				{
				State = 100; iffExpr();
				}
				break;
			case 3:
				{
				State = 101; concatExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(QikTemplateParser.IDENTIFIER, 0); }
		public FuncArgContext[] funcArg() {
			return GetRuleContexts<FuncArgContext>();
		}
		public FuncArgContext funcArg(int i) {
			return GetRuleContext<FuncArgContext>(i);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 22, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(IDENTIFIER);
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				{
				State = 105; Match(T__10);
				}
				break;
			case T__11:
				{
				State = 106; Match(T__11);
				State = 107; funcArg();
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__12) {
					{
					{
					State = 108; Match(T__12);
					State = 109; funcArg();
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 115; Match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncArgContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConcatExprContext concatExpr() {
			return GetRuleContext<ConcatExprContext>(0);
		}
		public FuncArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.EnterFuncArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQikTemplateListener typedListener = listener as IQikTemplateListener;
			if (typedListener != null) typedListener.ExitFuncArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQikTemplateVisitor<TResult> typedVisitor = visitor as IQikTemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncArgContext funcArg() {
		FuncArgContext _localctx = new FuncArgContext(Context, State);
		EnterRule(_localctx, 24, RULE_funcArg);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120; concatExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', '~', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x1F', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', ' ', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '.', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x38', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', '\x41', '\n', '\a', '\r', 
		'\a', '\xE', '\a', '\x42', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', 'J', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', 'P', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x6', '\t', 'T', '\n', '\t', '\r', '\t', '\xE', '\t', 'U', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\x63', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', 'i', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 'q', '\n', '\r', '\f', 
		'\r', '\xE', '\r', 't', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'x', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '|', '\n', 
		'\xE', '\x3', '\xE', '\x2', '\x2', '\xF', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x2', '\x3', 
		'\x3', '\x2', '\x5', '\x6', '\x2', '\x87', '\x2', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x37', '\x3', '\x2', '\x2', '\x2', '\n', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\f', '=', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x10', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'Y', '\x3', '\x2', '\x2', '\x2', '\x14', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x64', '\x3', '\x2', '\x2', '\x2', '\x18', 'j', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '{', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1F', '\x5', '\x4', '\x3', '\x2', '\x1D', '\x1F', '\x5', '\x6', '\x4', 
		'\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '\x14', '\x2', '\x2', 
		'#', '$', '\a', '\x3', '\x2', '\x2', '$', '%', '\a', '\x12', '\x2', '\x2', 
		'%', '&', '\a', '\x4', '\x2', '\x2', '&', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\a', '\x14', '\x2', '\x2', '(', '-', '\a', '\x3', '\x2', 
		'\x2', ')', '.', '\x5', '\b', '\x5', '\x2', '*', '.', '\x5', '\f', '\a', 
		'\x2', '+', '.', '\x5', '\xE', '\b', '\x2', ',', '.', '\x5', '\x10', '\t', 
		'\x2', '-', ')', '\x3', '\x2', '\x2', '\x2', '-', '*', '\x3', '\x2', '\x2', 
		'\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '-', ',', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\x4', 
		'\x2', '\x2', '\x30', '\a', '\x3', '\x2', '\x2', '\x2', '\x31', '\x38', 
		'\x5', '\x18', '\r', '\x2', '\x32', '\x38', '\a', '\x12', '\x2', '\x2', 
		'\x33', '\x38', '\a', '\x14', '\x2', '\x2', '\x34', '\x38', '\a', '\x16', 
		'\x2', '\x2', '\x35', '\x38', '\a', '\x15', '\x2', '\x2', '\x36', '\x38', 
		'\a', '\x11', '\x2', '\x2', '\x37', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x32', '\x3', '\x2', '\x2', '\x2', '\x37', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x34', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\t', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x5', '\b', '\x5', 
		'\x2', ':', ';', '\t', '\x2', '\x2', '\x2', ';', '<', '\x5', '\b', '\x5', 
		'\x2', '<', '\v', '\x3', '\x2', '\x2', '\x2', '=', '@', '\x5', '\b', '\x5', 
		'\x2', '>', '?', '\a', '\a', '\x2', '\x2', '?', '\x41', '\x5', '\b', '\x5', 
		'\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\x5', '\n', '\x6', '\x2', '\x45', 'I', '\a', '\b', '\x2', 
		'\x2', '\x46', 'J', '\x5', '\b', '\x5', '\x2', 'G', 'J', '\x5', '\xE', 
		'\b', '\x2', 'H', 'J', '\x5', '\f', '\a', '\x2', 'I', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'O', '\a', '\t', 
		'\x2', '\x2', 'L', 'P', '\x5', '\b', '\x5', '\x2', 'M', 'P', '\x5', '\xE', 
		'\b', '\x2', 'N', 'P', '\x5', '\f', '\a', '\x2', 'O', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\xF', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x5', 
		'\x12', '\n', '\x2', 'R', 'T', '\x5', '\x14', '\v', '\x2', 'S', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'X', '\x5', '\x16', '\f', '\x2', 'X', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\n', '\x2', '\x2', 'Z', '[', 
		'\x5', '\b', '\x5', '\x2', '[', '\x13', '\x3', '\x2', '\x2', '\x2', '\\', 
		']', '\a', '\v', '\x2', '\x2', ']', '^', '\a', '\x12', '\x2', '\x2', '^', 
		'\x62', '\a', '\t', '\x2', '\x2', '_', '\x63', '\x5', '\b', '\x5', '\x2', 
		'`', '\x63', '\x5', '\xE', '\b', '\x2', '\x61', '\x63', '\x5', '\f', '\a', 
		'\x2', '\x62', '_', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x64', 'h', '\a', '\f', '\x2', '\x2', '\x65', 
		'i', '\x5', '\b', '\x5', '\x2', '\x66', 'i', '\x5', '\xE', '\b', '\x2', 
		'g', 'i', '\x5', '\f', '\a', '\x2', 'h', '\x65', '\x3', '\x2', '\x2', 
		'\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'i', '\x17', '\x3', '\x2', '\x2', '\x2', 'j', 'w', '\a', 
		'\x13', '\x2', '\x2', 'k', 'x', '\a', '\r', '\x2', '\x2', 'l', 'm', '\a', 
		'\xE', '\x2', '\x2', 'm', 'r', '\x5', '\x1A', '\xE', '\x2', 'n', 'o', 
		'\a', '\xF', '\x2', '\x2', 'o', 'q', '\x5', '\x1A', '\xE', '\x2', 'p', 
		'n', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 
		'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', 'u', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\a', '\x10', '\x2', '\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 
		'w', 'k', '\x3', '\x2', '\x2', '\x2', 'w', 'l', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x19', '\x3', '\x2', '\x2', '\x2', 'y', '|', '\x5', '\b', '\x5', 
		'\x2', 'z', '|', '\x5', '\f', '\a', '\x2', '{', 'y', '\x3', '\x2', '\x2', 
		'\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x1E', ' ', '-', '\x37', '\x42', 'I', 'O', 'U', 
		'\x62', 'h', 'r', 'w', '{',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CygSoft.Qik.Antlr
